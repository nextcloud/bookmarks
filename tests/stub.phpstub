<?php

declare(strict_types=1);
namespace OC\Hooks {
	class Emitter {
		public function emit(string $class, string $value, array $option) {
		}
		/** Closure $closure */
		public function listen(string $class, string $value, $closure) {
		}
	}
}

namespace OC {
	class SystemConfig {
		public function getKeys();
		public function setValue($key, $value);
		public function setValues(array $configs);
		public function getValue($key, $default = '');
		public function getFilteredValue($key, $default = '');
		public function deleteValue($key);
	}
}


namespace OC\Files\Cache {


	class CacheQueryBuilder extends \OCP\DB\QueryBuilder\IQueryBuilder {
		public function __construct(\OCP\IDBCOnnection $db, \OC\SystemConfig $config, \Psr\Log\LoggerInterface $logger, \OCP\FilesMetadata\IFilesMetadataManager $filesMetadataManager);
		public function selectFileCache(?string $alias = null, bool $joinExtendedCache = true):CacheQueryBuilder;
		public function whereStorageId(int $storageId):CacheQueryBuilder;
		public function whereFileId(int $fileId):CacheQueryBuilder;
		public function wherePath(string $path):CacheQueryBuilder;
		public function whereParent(int $parent):CacheQueryBuilder;
		public function whereParentInParameter(string $parameter):CacheQueryBuilder;
	}
}

namespace Doctrine\DBAL {
	final class ParameterType {
		/**
		 * Represents the SQL NULL data type.
		 */
		public const NULL = 0;

		/**
		 * Represents the SQL INTEGER data type.
		 */
		public const INTEGER = 1;

		/**
		 * Represents the SQL CHAR, VARCHAR, or other string data type.
		 *
		 * @see \PDO::PARAM_STR
		 */
		public const STRING = 2;

		/**
		 * Represents the SQL large object data type.
		 */
		public const LARGE_OBJECT = 3;

		/**
		 * Represents a boolean data type.
		 *
		 * @see \PDO::PARAM_BOOL
		 */
		public const BOOLEAN = 5;

		/**
		 * Represents a binary string data type.
		 */
		public const BINARY = 16;

		/**
		 * Represents an ASCII string data type
		 */
		public const ASCII = 17;

		/**
		 * This class cannot be instantiated.
		 *
		 * @codeCoverageIgnore
		 */
		private function __construct() {
		}
	}

	final class ArrayParameterType {
		/**
		 * Represents an array of ints to be expanded by Doctrine SQL parsing.
		 */
		public const INTEGER = ParameterType::INTEGER + Connection::ARRAY_PARAM_OFFSET;

		/**
		 * Represents an array of strings to be expanded by Doctrine SQL parsing.
		 */
		public const STRING = ParameterType::STRING + Connection::ARRAY_PARAM_OFFSET;

		/**
		 * Represents an array of ascii strings to be expanded by Doctrine SQL parsing.
		 */
		public const ASCII = ParameterType::ASCII + Connection::ARRAY_PARAM_OFFSET;

		/**
		 * Represents an array of ascii strings to be expanded by Doctrine SQL parsing.
		 */
		public const BINARY = ParameterType::BINARY + Connection::ARRAY_PARAM_OFFSET;

		/**
		 * @internal
		 *
		 * @psalm-param self::* $type
		 *
		 * @psalm-return ParameterType::INTEGER|ParameterType::STRING|ParameterType::ASCII|ParameterType::BINARY
		 */
		public static function toElementParameterType(int $type): int {
		}

		private function __construct() {
		}
	}

	class Connection {
		/**
		 * Represents an array of ints to be expanded by Doctrine SQL parsing.
		 */
		public const PARAM_INT_ARRAY = ParameterType::INTEGER + self::ARRAY_PARAM_OFFSET;

		/**
		 * Represents an array of strings to be expanded by Doctrine SQL parsing.
		 */
		public const PARAM_STR_ARRAY = ParameterType::STRING + self::ARRAY_PARAM_OFFSET;

		/**
		 * Offset by which PARAM_* constants are detected as arrays of the param type.
		 */
		public const ARRAY_PARAM_OFFSET = 100;
	}
}

namespace OCA\ContextChat\Public {
/**
 * This interface defines methods to implement a content provider
 * @since 1.1.0
 */
interface IContentProvider {
	/**
	 * The ID of the provider
	 *
	 * @return string
	 * @since 1.1.0
	 */
	public function getId(): string;

	/**
	 * The ID of the app making the provider avaialble
	 *
	 * @return string
	 * @since 1.1.0
	 */
	public function getAppId(): string;

	/**
	 * The absolute URL to the content item
	 *
	 * @param string $id
	 * @return string
	 * @since 1.1.0
	 */
	public function getItemUrl(string $id): string;

	/**
	 * Starts the initial import of content items into content chat
	 *
	 * @return void
	 * @since 1.1.0
	 */
	public function triggerInitialImport(): void;
}

class ContentManager {
    public function registerContentProvider(string, $appId, string $providerId, string $providerClass);
    public function submitContent(string $appId, array $items);
    public function deleteContent(string $appId, string $providerId, array $itemIds);
}

class ContentItem {
    public function __construct(
                               		string $itemId,
                               		string $providerId,
                               		string $title,
                               		string $content,
                               		string $documentType,
                               		\DateTime $lastModified,
                               		array $users,
                               	);
}
}

namespace OCA\ContextChat\Event {
class ContentProviderRegisterEvent extends \OCP\EventDispatcher\Event {
    public function registerContentProvider(string $appId, string $provider, string $class);
}
}